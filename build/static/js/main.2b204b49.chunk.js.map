{"version":3,"sources":["component/form.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Form","props","fetchJale","a","fetch","state","name","res","json","data","console","log","sprites","front_default","setState","img","handleName","event","target","value","handleSubmit","jeje","alert","preventDefault","className","onSubmit","this","type","placeholder","onChange","src","class","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2b204b49.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\nclass Form extends React.Component{  \n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      img: '#',\n    }\n  }\n  \n  /*\n  async componentDidMount(){\n    await this.fetchJale()\n  }*/\n\n  fetchJale = async () => {\n    //let res = await fetch('https://pokeapi.co/api/v2/pokemon/venusaur')\n    let res = await fetch(`https://pokeapi.co/api/v2/pokemon/${this.state.name}`)\n    let data = await res.json()\n   // console.log(data['sprites']['front_default'])\n    console.log(data.name);\n    console.log(data.sprites.front_default)\n    this.setState({\n      img: data.sprites.front_default\n    })\n  }\n  \n\n  handleName = event => {\n    this.setState({\n      name: event.target.value\n    })\n  }\n  \n\n  handleSubmit = event =>{\n    var jeje = this.state.name;\n    alert(jeje)\n    this.fetchJale()\n    this.setState({\n      name: '',\n    })\n    event.preventDefault()\n  }\n  \n    \n\n    render() {\n        return (\n        <div className=\"card text-center\">\n          <div className=\"card-header\">\n            Pokedex\n          </div>\n          <div className=\"card-body\">\n        <form onSubmit={this.handleSubmit}>    \n            <label>Ingrese el pokemon</label><br/>\n            <input \n                type=\"text\"\n                placeholder=\"nombre\"\n                value={this.state.name}\n                onChange={this.handleName}\n            /><br/><br/>\n            <button type=\"submit\" className=\"btn btn-primary\">submit</button>\n        </form>\n        <img src={this.state.img}/>\n       \n          </div>\n          <div className=\"card-footer text-muted\">\n            \n            Por: juan sebastian arguello\n            ID:00345476\n          </div>\n          <button class=\"add-button\">Add to home screen</button>\n        </div>\n        );\n    }\n\n}\n\n\nexport default Form\n","\nimport React, {Component} from 'react';\nimport './style/App.css'\nimport Form from './component/form';\n\n\n\n\nclass App extends React.Component{\n  \n  render() {\n    return (\n      <div>\n        {}\n\n        <Form/>\n      \n      \n        \n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}